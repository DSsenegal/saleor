# Generated by Django 3.2.25 on 2024-08-05 07:27
from django.db import migrations, transaction
from django.db.models import F

# The batch of size 250 takes ~0.2 second and consumes ~20MB memory at peak
ORDER_SET_SHIPPING_PRICE_BATCH_SIZE = 250


def set_udniscounted_base_shipping_price_on_draft_orders(apps, _schema_editor):
    Order = apps.get_model("order", "Order")
    qs = Order.objects.filter(
        undiscounted_base_shipping_price_amount=0,
        base_shipping_price_amount__gt=0,
        status="draft",
    )
    for batch_numbers in queryset_in_batches(qs):
        orders = Order.objects.filter(number__in=batch_numbers)
        _set_undiscounted_base_shipping_price(orders)


def _set_undiscounted_base_shipping_price(orders):
    with transaction.atomic():
        _orders = list(orders.select_for_update(of=(["self"])))
        orders.update(
            undiscounted_base_shipping_price_amount=F("base_shipping_price_amount")
        )


def queryset_in_batches(queryset):
    """Slice a queryset into batches.

    Input queryset should be sorted be pk.
    """
    start_number = None

    while True:
        lookup = {}
        if start_number is not None:
            lookup["number__gt"] = start_number
        qs = queryset.order_by("number").filter(**lookup)[
            :ORDER_SET_SHIPPING_PRICE_BATCH_SIZE
        ]
        numbers = list(qs.values_list("number", flat=True))

        if not numbers:
            break

        yield numbers

        start_number = numbers[-1]


class Migration(migrations.Migration):
    dependencies = [
        ("order", "0191_merge_20240726_1508"),
    ]

    operations = [
        migrations.RunPython(
            set_udniscounted_base_shipping_price_on_draft_orders,
            reverse_code=migrations.RunPython.noop,
        )
    ]
